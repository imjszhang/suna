services:
  redis:
    image: redis:7-alpine
    expose:
      - "6379"
    volumes:
      - redis-data:/data
    command: redis-server --save 60 1 --loglevel warning
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - dokploy-network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        - ENV_MODE=${ENV_MODE:-local}
        - REDIS_HOST=${REDIS_HOST:-redis}
        - REDIS_PORT=${REDIS_PORT:-6379}
        - REDIS_PASSWORD=${REDIS_PASSWORD:-}
        - REDIS_SSL=${REDIS_SSL:-False}
        - SUPABASE_URL=${SUPABASE_URL}
        - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
        - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
        - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
        - OPENAI_API_KEY=${OPENAI_API_KEY}
        - OPENAI_API_BASE=${OPENAI_API_BASE}
        - MODEL_TO_USE=${MODEL_TO_USE}
        - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
        - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
        - AWS_REGION_NAME=${AWS_REGION_NAME}
        - GROQ_API_KEY=${GROQ_API_KEY}
        - OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
        - RAPID_API_KEY=${RAPID_API_KEY}
        - TAVILY_API_KEY=${TAVILY_API_KEY}
        - FIRECRAWL_API_KEY=${FIRECRAWL_API_KEY}
        - FIRECRAWL_URL=${FIRECRAWL_URL}
        - DAYTONA_API_KEY=${DAYTONA_API_KEY}
        - DAYTONA_SERVER_URL=${DAYTONA_SERVER_URL}
        - DAYTONA_TARGET=${DAYTONA_TARGET}        
    expose:
      - "8000"
    volumes:
      - ./backend/.env:/app/.env:ro
      - ./backend:/app:ro
    environment:
      - ENV_MODE=${ENV_MODE:-local}
      - REDIS_HOST=${REDIS_HOST:-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      - REDIS_SSL=${REDIS_SSL:-False}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_API_BASE=${OPENAI_API_BASE}
      - MODEL_TO_USE=${MODEL_TO_USE}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION_NAME=${AWS_REGION_NAME}
      - GROQ_API_KEY=${GROQ_API_KEY}
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
      - RAPID_API_KEY=${RAPID_API_KEY}
      - TAVILY_API_KEY=${TAVILY_API_KEY}
      - FIRECRAWL_API_KEY=${FIRECRAWL_API_KEY}
      - FIRECRAWL_URL=${FIRECRAWL_URL}
      - DAYTONA_API_KEY=${DAYTONA_API_KEY}
      - DAYTONA_SERVER_URL=${DAYTONA_SERVER_URL}
      - DAYTONA_TARGET=${DAYTONA_TARGET}
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - dokploy-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=Host(`api.suna.${DOMAIN:-dokploy.localhost}`)"
      - "traefik.http.routers.backend.entrypoints=web"
      - "traefik.http.services.backend.loadbalancer.server.port=8000"
      - "traefik.docker.network=dokploy-network"

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - NEXT_PUBLIC_ENV_MODE=${NEXT_PUBLIC_ENV_MODE}
        - NEXT_PUBLIC_SUPABASE_URL=${NEXT_PUBLIC_SUPABASE_URL}
        - NEXT_PUBLIC_SUPABASE_ANON_KEY=${NEXT_PUBLIC_SUPABASE_ANON_KEY}
        - NEXT_PUBLIC_BACKEND_URL=${NEXT_PUBLIC_BACKEND_URL}
        - NEXT_PUBLIC_URL=${NEXT_PUBLIC_URL}
        - NEXT_PUBLIC_GOOGLE_CLIENT_ID=${NEXT_PUBLIC_GOOGLE_CLIENT_ID}
        - OPENAI_API_KEY=${OPENAI_API_KEY}
        - OPENAI_API_BASE=${OPENAI_API_BASE}
    expose:
      - "3000"
    volumes:
      - ./frontend/.env.local:/app/.env.local:ro
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_ENV_MODE=${NEXT_PUBLIC_ENV_MODE}
      - NEXT_PUBLIC_SUPABASE_URL=${NEXT_PUBLIC_SUPABASE_URL}
      - NEXT_PUBLIC_SUPABASE_ANON_KEY=${NEXT_PUBLIC_SUPABASE_ANON_KEY}
      - NEXT_PUBLIC_BACKEND_URL=${NEXT_PUBLIC_BACKEND_URL}
      - NEXT_PUBLIC_URL=${NEXT_PUBLIC_URL}
      - NEXT_PUBLIC_GOOGLE_CLIENT_ID=${NEXT_PUBLIC_GOOGLE_CLIENT_ID}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    command: ["npm", "run", "start"]
    depends_on:
      - backend
    networks:
      - dokploy-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`suna.${DOMAIN:-dokploy.localhost}`)"
      - "traefik.http.routers.frontend.entrypoints=web"
      - "traefik.http.services.frontend.loadbalancer.server.port=3000"
      - "traefik.docker.network=dokploy-network"

volumes:
  redis-data:

networks:
  dokploy-network:
    external: true